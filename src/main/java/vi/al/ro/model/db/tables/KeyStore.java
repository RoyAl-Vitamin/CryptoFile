/*
 * This file is generated by jOOQ.
 */
package vi.al.ro.model.db.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import vi.al.ro.model.db.Keys;
import vi.al.ro.model.db.Public;
import vi.al.ro.model.db.tables.records.KeyStoreRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class KeyStore extends TableImpl<KeyStoreRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.key_store</code>
     */
    public static final KeyStore KEY_STORE = new KeyStore();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<KeyStoreRecord> getRecordType() {
        return KeyStoreRecord.class;
    }

    /**
     * The column <code>PUBLIC.key_store.id</code>.
     */
    public final TableField<KeyStoreRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.key_store.alias</code>.
     */
    public final TableField<KeyStoreRecord, String> ALIAS = createField(DSL.name("alias"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>PUBLIC.key_store.password</code>.
     */
    public final TableField<KeyStoreRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>PUBLIC.key_store.path_file</code>.
     */
    public final TableField<KeyStoreRecord, String> PATH_FILE = createField(DSL.name("path_file"), SQLDataType.VARCHAR(255), this, "");

    private KeyStore(Name alias, Table<KeyStoreRecord> aliased) {
        this(alias, aliased, null);
    }

    private KeyStore(Name alias, Table<KeyStoreRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>PUBLIC.key_store</code> table reference
     */
    public KeyStore(String alias) {
        this(DSL.name(alias), KEY_STORE);
    }

    /**
     * Create an aliased <code>PUBLIC.key_store</code> table reference
     */
    public KeyStore(Name alias) {
        this(alias, KEY_STORE);
    }

    /**
     * Create a <code>PUBLIC.key_store</code> table reference
     */
    public KeyStore() {
        this(DSL.name("key_store"), null);
    }

    public <O extends Record> KeyStore(Table<O> child, ForeignKey<O, KeyStoreRecord> key) {
        super(child, key, KEY_STORE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<KeyStoreRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_9;
    }

    @Override
    public List<UniqueKey<KeyStoreRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CONSTRAINT_9D);
    }

    @Override
    public KeyStore as(String alias) {
        return new KeyStore(DSL.name(alias), this);
    }

    @Override
    public KeyStore as(Name alias) {
        return new KeyStore(alias, this);
    }

    @Override
    public KeyStore as(Table<?> alias) {
        return new KeyStore(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public KeyStore rename(String name) {
        return new KeyStore(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public KeyStore rename(Name name) {
        return new KeyStore(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public KeyStore rename(Table<?> name) {
        return new KeyStore(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Long, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Long, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
