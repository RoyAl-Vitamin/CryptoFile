/*
 * This file is generated by jOOQ.
 */
package vi.al.ro.model.db.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;

import vi.al.ro.model.db.tables.KeyStore;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class KeyStoreRecord extends UpdatableRecordImpl<KeyStoreRecord> implements Record4<Long, String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>PUBLIC.key_store.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>PUBLIC.key_store.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>PUBLIC.key_store.alias</code>.
     */
    public void setAlias(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>PUBLIC.key_store.alias</code>.
     */
    public String getAlias() {
        return (String) get(1);
    }

    /**
     * Setter for <code>PUBLIC.key_store.password</code>.
     */
    public void setPassword(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>PUBLIC.key_store.password</code>.
     */
    public String getPassword() {
        return (String) get(2);
    }

    /**
     * Setter for <code>PUBLIC.key_store.path_file</code>.
     */
    public void setPathFile(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>PUBLIC.key_store.path_file</code>.
     */
    public String getPathFile() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Long, String, String, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return KeyStore.KEY_STORE.ID;
    }

    @Override
    public Field<String> field2() {
        return KeyStore.KEY_STORE.ALIAS;
    }

    @Override
    public Field<String> field3() {
        return KeyStore.KEY_STORE.PASSWORD;
    }

    @Override
    public Field<String> field4() {
        return KeyStore.KEY_STORE.PATH_FILE;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getAlias();
    }

    @Override
    public String component3() {
        return getPassword();
    }

    @Override
    public String component4() {
        return getPathFile();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getAlias();
    }

    @Override
    public String value3() {
        return getPassword();
    }

    @Override
    public String value4() {
        return getPathFile();
    }

    @Override
    public KeyStoreRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public KeyStoreRecord value2(String value) {
        setAlias(value);
        return this;
    }

    @Override
    public KeyStoreRecord value3(String value) {
        setPassword(value);
        return this;
    }

    @Override
    public KeyStoreRecord value4(String value) {
        setPathFile(value);
        return this;
    }

    @Override
    public KeyStoreRecord values(Long value1, String value2, String value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached KeyStoreRecord
     */
    public KeyStoreRecord() {
        super(KeyStore.KEY_STORE);
    }

    /**
     * Create a detached, initialised KeyStoreRecord
     */
    public KeyStoreRecord(Long id, String alias, String password, String pathFile) {
        super(KeyStore.KEY_STORE);

        setId(id);
        setAlias(alias);
        setPassword(password);
        setPathFile(pathFile);
    }
}
